@use "../utils/mixins";
@use "../utils/variables";
@use "../utils/colors";
@use "../utils/animations";

@keyframes quarterspin {
    0% {
        transform: rotate(-270deg);
    }    
    100% {
        transform: rotate(0);
    
    }
    }

body {
    background-color: colors.$lightergrey;
}

#page-resto {
    header{
        &:hover::before {
            @include mixins.transform-zoom(1.2, $transformation: translateY(-50%));
        }
        &::before {
            @include mixins.font-awesome($font-weight: 900);
            content: "\f060";
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            font-size: 20px;
            transition: transform 200ms;
        }
        }

    .banner img {
        display: block;
        width: 100%;
        height: 70vh;
        object-fit: cover;
        object-position: center;
    }
    
    .resto__title {
        margin-top: -2rem;
        h2 {
            font-family: "Shrikhand", "cursive";
            padding: 2rem 1rem;
            @include mixins.heart-animated;   
            border-radius: 2rem 2rem 0 0;
            background-color: colors.$lightergrey;
        }
    }   
    
    .resto-main {
        padding: 0 1rem;
    }
    .menus {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
        @media (max-width: variables.$breakpoint){
            grid-template-columns: 1fr;
        }
        h3 {
            text-transform: uppercase;
            font-weight: 400;
            position: relative;
            margin-bottom: 1rem;
            &::after {
                content: "";
                position: absolute;
                top: 1.5rem;
                left: 0;
                height: 0.25rem;
                width: 3rem;
                background-color: colors.$color-tertiary;
            }
        }

        /* ANIMATION : Menus qui apparaissent progressivement :
        J'ai utilisé la pseudo-classe "nth-child".
        Ca veut dire que le premier enfant de la class ".menus__category" a une animation-delay de 100ms, le deuxième enfant de la class ".menus__category" a une animation-delay de 200ms, le troisième enfant de la class ".menus__category" a une animation-delay de 300ms. */

        .menus__category {
            overflow: hidden;
      
            .menu-item {
                $numberOfItems: 3;
                @for $i from 1 through $numberOfItems {
                   &:nth-child(#{$i}) {
                       animation-delay: 100ms * $i;
                    }
                }
                display: flex;
                background-color: white;
                border-radius: 1rem;
                overflow: hidden;
                margin: 0.5rem;
                @include mixins.box-shadow;
                animation: appear 1s;
                animation-fill-mode: both;

                .menu-item__price {
                    margin-left: auto;
                    font-weight: 900;
                    padding: 1rem;
                    display: flex;
                    align-items: flex-end;
                }

                /* J'ai utilisé la propriété "white-space" avec la valeur "nowrap"  pour forcer le texte à rester sur une seule ligne. 
                Pour que la partie du texte située à l'extérieur ne soit pas visible lorsque je réduis le responsive, j'ai utilisé la propriété "overflow" avec la valeur "hidden".
                Pour afficher les 3 petits points qui indiquent que le texte est rogné, j'ai utilisé la propriété "text-overflow" avec la valeur "ellipsis".
                 */

                .menu-item__description {
                    padding: 1rem;
                    overflow: hidden;
                    h4, 
                    p {
                        overflow: hidden;
                        white-space: nowrap;
                        text-overflow: ellipsis;
                    }
                }

                /* Pour que le "check" garde la même taille lorsque je réduis le responsive, j'ai appliqué la propriété "flex-shrink" avec une valeur de 0. */

                .menu-item__check {
                    display: grid;
                    place-items: center;
                    flex-shrink: 0;
                    $button-width: 4rem;
                    border-radius: 0 1rem 1rem 0;
                    background-color: colors.$color-tertiary;
                    margin-right: -$button-width;
                    width: $button-width;
                    transition: margin-right 0.5s;
                    i {
                        $size: 1rem;
                        display: grid;
                        place-items: center;
                        background: white;
                        height: $size;
                        width: $size;
                        border-radius: 1rem;
                        color: colors.$color-tertiary;
                    }
                }
                &:hover {
                    cursor: pointer;
                    .menu-item__check {
                    margin-right: 0;
                    }
                    i {
                        @include animations.quarterspin;
                        animation: quarterspin 0.5s ease-in-out;
                    }
                }
            }
        }
    }

    section.order {
        height: 30vh;
        display: grid;
        place-items: center;
        button {
            @include mixins.base-button;
        }
    }
}
    