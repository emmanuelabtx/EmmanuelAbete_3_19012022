@use "../utils/mixins";
@use "../utils/colors";

.explorer {
    text-align: center;
    margin: 2rem; 
    & h2 {
        font-size: 1.5rem;
        margin: 1rem;
    }
    
    & p {
        font-size: 1rem;
    }
    
    & button {
        @include mixins.base-button;
        font-size: 1rem;

        }
    }

    /* ANIMATION - Loader :
    J'ai créé cette animation à l'aide d'un pseudo-élément, en pur CSS.
    J'ai expérimenté un "display: grid" sur la class .loader, et ça a bien fonctionné. 
    Le problème c'est que si maintenant j'applique à la place du "display: grid" un "display: flex", le loader se positionnera par erreur à gauche au lieu de se positionner au centre. 
    
    Pour que l'élément en arrière-plan du loader reste à sa dernière place, j'ai utilisé la propriété "animation". En y appliquant la valeur "forwards", l'élément en arrière-plan conserve sa dernière position avant l'animation. */

    .loader {
        $animation-duration: 1s;
        $animation-count: 3;
        position: fixed;
        display: grid;
        place-items: center;
        background-color: #ffffff;
        height: 100vh;
        inset: 0;
        z-index: 1;
        opacity: 0.9;
        animation: disappear 200ms $animation-duration * $animation-count forwards;
        transform-origin: top;
        &::after {
            content: "";
            height: 100px;
            width: 100px;
            border-right: 5px solid transparent;
            border-top: 5px solid colors.$purple;
            border-radius: 50%;
            animation: spin $animation-duration ease-in-out;
            animation-iteration-count: $animation-count;
          }
    }

    @keyframes disappear {
    to {
       transform: scale(0);
      }
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }